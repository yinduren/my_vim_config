" How to install vim-plug
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim

" reload vimrc when it was modified and saved
" autocmd BufWritePost $MYVIMRC source $MYVIMRC

set nocompatible

set runtimepath^=~/.vim/plugin

let mapleader=","

" Basic settings
set encoding=utf-8
set number
set relativenumber
set wrap
set showcmd
set nobackup
set wildmenu
set ai
set scrolloff=5
syntax on
set updatetime=100

" highlight 80 colum
set cc=120

" Clear current search highlight
noremap <LEADER><CR> :nohlsearch<CR>
set hlsearch
set incsearch
set smartcase

" Filetype related
filetype on
filetype indent on
filetype plugin on
filetype plugin indent on

set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab

set noswapfile
set history=400

set backspace=indent,eol,start

" Remap ESC
inoremap <C-j> <Esc>
vnoremap <C-j> <Esc>
nnoremap <C-j> <Esc>

" Write file
nmap <LEADER>w :w<CR>
nmap <LEADER>q :q<CR>

" Change buffer
nnoremap <silent> <LEADER>bn :bnext<CR>
nnoremap <silent> <LEADER>bp :bprevious<CR>


" Copy and paset
"vnoremap <LEADER>y "+y
"nmap <LEADER>p "+p

" Go to line head or tail
nmap H ^
nmap L $

cmap <C-p> <UP>
nmap <C-p> <PageUp>

nmap <C-n> <C-f>
nmap <C-p> <C-b>


" Find Duplicate words
map <LEADER>fd /\(\<\w\+\>\)\_s*\1

let &t_ut=''

map vsr :set splitright<CR>:vsplit<CR>
map vs :set nosplitright<CR>:vsplit<CR>
map su :set nosplitbelow<CR>:split<CR>
map sd :set splitbelow<CR>:split<CR>

noremap wp :resize +5<CR>
noremap ws :resize -5<CR>
noremap vwp :vertical resize+5<CR>
noremap vws :vertical resize-5<CR>

" Set cursor shape in different mod
let &t_SI = "\<Esc>]50;CursorShape=1\x7"
let &t_SR = "\<Esc>]50;CursorShape=2\x7"
let &t_EI = "\<Esc>]50;CursorShape=0\x7"

map <LEADER>l <C-w>l
map <LEADER>h <C-w>h
map <LEADER>j <C-w>j
map <LEADER>k <C-w>k

map tb :tabedit<CR>
map tn :-tabnext<CR>
map tp :+tabnext<CR>

cnoremap <expr> %% getcmdtype() == ':' ? expand('%:h').'/' : '%%'

" For count pattern matches number
nmap ct :%s///gn<cr>

" For search the current selection
xnoremap * :<C-u>call <SID>VSetSearch()<CR>/<C-R>=@/<CR><CR>
xnoremap # :<C-u>call <SID>VSetSearch()<CR>?<C-R>=@/<CR><CR>
function! s:VSetSearch()
	let temp = @s
	norm! gv"sy
	let @/ = '\V' . substitute(escape(@s, '/\'), '\n', '\\n', 'g')
	let @s = temp
endfunction

" For color
hi Comment Ctermfg=6

" Support mouse
"set mouse=a

"For mini buf explorer
let g:miniBufExplMapCTabSwitchBufs=1
let g:miniBufexplMapWindowNavVim=1
let g:miniBufexplMapWindowNavArrows=1
let g:miniBufExplModSelTarget=1

" For tag list
"nmap ts :Tlist<cr>
"let Tlist_Show_One_File=1
"let Tlist_Exit_OnlyWindow=1
"let Tlist_WinWidth=20

" Settings for cscope
if has("cscope")
    set csprg=/usr/bin/cscope
    set csto=0
    set cst
    set nocsverb

    " add any database in current directory
    if filereadable("cscope.out")
        cscope add cscope.out
    " else add database pointed to by environment
    elseif $CSCOPE_DB != ""
        cscope add $CSCOPE_DB
    endif

    set csverb
endif

" For cscope
map cs :cs f 
nmap <C-i>s :cs find s <C-R>=expand("<cword>")<CR><CR>
nmap <C-i>g :cs find g <C-R>=expand("<cword>")<CR><CR>
nmap <C-i>c :cs find c <C-R>=expand("<cword>")<CR><CR>
nmap <C-i>t :cs find t <C-R>=expand("<cword>")<CR><CR>
nmap <C-i>e :cs find e <C-R>=expand("<cword>")<CR><CR>
nmap <C-i>f :cs find f <C-R>=expand("<cword>")<CR><CR>
nmap <C-i>i :cs find i <C-R>=expand("<cword>")<CR><CR>
nmap <C-i>d :cs find d <C-R>=expand("<cword>")<CR><CR>

" For search
nmap <C-\><C-\> :vimgrep <cword> **/*.c **/*.h<CR>:cw<CR>
nmap <C-\> :vimgrep <cword> %<CR>:cw<CR>

" For json format
map <F2> :%!python -m json.tool<CR>

" For display with 16
"%!xxd

" For write with 16
"%!xxd -r

" For vim-plug begin
call plug#begin('~/.vim/plugged')

Plug 'vim-airline/vim-airline'
Plug 'vim-airline/vim-airline-themes'
Plug 'connorholyday/vim-snazzy'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
Plug 'vim-scripts/minibufexpl.vim'

" File navigation
Plug 'scrooloose/nerdtree', { 'on': 'NERDTreeToggle' }
Plug 'Xuyuanp/nerdtree-git-plugin'

" Plug 'majutsushi/tagbar'
" Need universal-ctags not support exuberant Ctags
Plug 'liuchengxu/vista.vim'

if has('nvim')
  Plug 'Shougo/defx.nvim', { 'do': ':UpdateRemotePlugins' }
else
  Plug 'Shougo/defx.nvim'
  Plug 'roxma/nvim-yarp'
  Plug 'roxma/vim-hug-neovim-rpc'
endif

Plug 'guns/xterm-color-table.vim'

" For CheckHealth
if !has('nvim')
    Plug 'rhysd/vim-healthcheck'
endif

call plug#end()
" For vim-plug end

" ===
" === snazzy
" ===
color snazzy

" ===
" === NERDTree
" ===
map tt :NERDTreeToggle<CR>
" if only nerd tree opened then close VIM
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
let g:NERDTreeDirArrowExpandable='‚ñ∫'
let g:NERDTreeDirArrowCollapsible='‚ñº'
let NERDTreeWinSize=20
let NERDTreeMapOpenExpl=""
let NERDTreeMapUpdir=""
let NERDTreeMapUpdirKeepOpen="l"
let NERDTreeMapOpenSplit=""
let NERDTreeOpenVSplit=""
let NERDTreeMapActivateNode="i"
let NERDTreeMapOpenInTab="o"
let NERDTreeMapPreview=""
let NERDTreeMapCloseDir="n"
let NERDTreeMapChangeRoot="y"
let NERDTreeIgnore=['\.pyc','\~$','\.swp']
let g:NERDTreeIndicatorMapCustom={
    \ "Modified"  : "‚úπ",
    \ "Staged"    : "‚úö",
    \ "Untracked" : "‚ú≠",
    \ "Renamed"   : "‚ûú",
    \ "Unmerged"  : "‚ïê",
    \ "Deleted"   : "‚úñ",
    \ "Dirty"     : "‚úó",
    \ "Clean"     : "‚úîÔ∏é",
    \ 'Ignored'   : '‚òí',
    \ "Unknown"   : "?"
    \ }
" }}}

" ===
" === Taglist
" ===
nmap ts :TagbarToggle<CR>
let g:tagbar_width=30
let g:tagbar_left=1

" ===
" === Vista
" ===
nmap vst :Vista!!<CR>
let g:vista_sidebar_position = 'vertical top'
let g:vista_sidebar_width = 20
let g:vista_ctags_executable = '/usr/bin/ctags'
let g:lightline = {
      \ 'colorscheme': 'wombat',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified', 'method' ] ]
      \ },
      \ 'component_function': {
      \   'method': 'NearestMethodOrFunction'
      \ },
      \ }

" ===
" === coco
" ===
let g:coc_global_extensions = ['coc-json', 'coc-vimlsp', 'coc-marketplace']
let g:coc_disable_startup_warning = 1

" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
"inoremap <silent><expr> <TAB>
"      \ pumvisible() ? "\<C-n>" :
"      \ <SID>check_back_space() ? "\<TAB>" :
"      \ coc#refresh()
"inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion. If needed open it
"inoremap <silent><expr> <c-o> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current
" position. Coc only does snippet and additional edit on confirm.
" <cr> could be remapped by other vim plugin, try `:verbose imap <CR>`.
if exists('*complete_info')
  inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"
else
  inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
endif

" Use `<LEADER>n` and `<LEADER>p` to navigate diagnostics
" Use `:CocDiagnostics` to get all diagnostics of current buffer in location list.
nmap <silent> <LEADER>p <Plug>(coc-diagnostic-prev)
nmap <silent> <LEADER>n <Plug>(coc-diagnostic-next)

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

" Use K to show documentation in preview window.
nnoremap <silent> K :call <SID>show_documentation()<CR>

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

" Highlight the symbol and its references when holding the cursor.
autocmd CursorHold * silent call CocActionAsync('highlight')

" Formatting selected code.
xmap <leader>f  <Plug>(coc-format-selected)
nmap <leader>f  <Plug>(coc-format-selected)

" ===
" === airline
" ===
"let g:airline_left_sep = 'üûÇ'
let g:airline_left_sep = 'ÓÇ∞'
let g:airline_left_alt_sep='>'
let g:airline_right_sep = 'ÓÇ≤'
let g:airline_right_alt_sep='<'
"let g:airline#extensions#tabline#enabled = 1

